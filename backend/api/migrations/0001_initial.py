# Generated by Django 4.2.9 on 2024-07-21 17:22

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('company_id', models.CharField(default='', editable=False, max_length=8, primary_key=True, serialize=False)),
                ('company_name', django_cryptography.fields.encrypt(models.CharField(max_length=100, unique=True))),
                ('registration_date', models.DateField()),
                ('registration_number', django_cryptography.fields.encrypt(models.CharField(max_length=10, unique=True))),
                ('address', models.TextField()),
                ('contact_person', django_cryptography.fields.encrypt(models.CharField(max_length=100, unique=True))),
                ('number_of_departments', models.IntegerField(default=0)),
                ('num_employees', models.PositiveIntegerField(default=0, editable=False)),
                ('contact_phone', django_cryptography.fields.encrypt(models.CharField(max_length=20, unique=True))),
                ('email_address', django_cryptography.fields.encrypt(models.EmailField(max_length=254, unique=True))),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_id', models.CharField(editable=False, max_length=8, primary_key=True, serialize=False)),
                ('department_name', models.CharField(max_length=100)),
                ('company', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='department', to='api.company')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employment_id', models.CharField(editable=False, max_length=8, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('employee_id', django_cryptography.fields.encrypt(models.CharField(max_length=11, unique=True))),
                ('role', django_cryptography.fields.encrypt(models.CharField(max_length=100))),
                ('date_started_role', models.DateField()),
                ('date_left_role', models.DateField(blank=True, null=True)),
                ('duties', django_cryptography.fields.encrypt(models.TextField())),
                ('employment_status', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='api.company')),
                ('department_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='api.department')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roles', models.CharField(max_length=100)),
                ('duties', models.TextField()),
                ('date_started_role', models.DateField()),
                ('date_left_role', models.DateField(blank=True, null=True)),
                ('company_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.company')),
                ('department_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.department')),
                ('employment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee', to='api.employee')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=100)),
                ('email', django_cryptography.fields.encrypt(models.EmailField(max_length=254, unique=True))),
                ('password', django_cryptography.fields.encrypt(models.CharField(max_length=21))),
                ('company_user_status', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='api.company')),
                ('employment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='api.employee')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
